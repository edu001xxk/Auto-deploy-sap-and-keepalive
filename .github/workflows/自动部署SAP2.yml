name: 自动部署 SAP & Firefox

on:
  workflow_dispatch:
    inputs:
      type:
        description: '选择部署的节点类型'
        required: true
        default: 'Argo隧道CDN'
        type: choice
        options:
          - ws直连
          - xhttp直连
          - Argo隧道CDN
          - Firefox 浏览器
      region:
        description: '选择部署区域'
        required: true
        default: 'US(free)'
        type: choice
        options:
          # 免费区域
          - SG(free)
          - US(free)
          # AWS 区域
          - AWS-AU(Sydney)
          - AWS-BR(São Paulo)
          - AWS-KR(Seoul)
          - AWS-CA(Montreal)
          - AWS-US(VA)
          - AWS-US(OR)
          - AWS-EU(Frankfurt)
          - AWS-JP(Tokyo)
          - AWS-SG(Singapore)
          # GCP 区域
          - GCP-AU(Sydney)
          - GCP-BR(São Paulo)
          - GCP-US(IA)
          - GCP-EU(Frankfurt)
          - GCP-JP(Osaka)
          - GCP-JP(Tokyo)
          - GCP-IL(Tel Aviv)
          - GCP-IN(Mumbai)
          - GCP-KSA(Dammam)
          # Azure 区域
          - Azure-AU(Sydney)
          - Azure-BR(São Paulo)
          - Azure-CA(Montreal)
          - Azure-US(VA)
          - Azure-US(WA)
          - Azure-EU(Netherlands)
          - Azure-JP(Tokyo)
          - Azure-SG(Singapore)
          # SAP Neo 区域
          - Neo-UAE(Dubai)
          - Neo-KSA(Riyadh)
      app_name:
        description: '应用名称（可选，留空则自动生成）'
        required: false
        default: ''

env:
  MEMORY: 256M

jobs:
  deploy-app:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: Determine CF API endpoint and app name
      run: |
        RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
        REGION="${{ github.event.inputs.region }}"

        case "$REGION" in
          # 免费区域
          "SG(free)") CF_API="https://api.cf.ap21.hana.ondemand.com"; APP_NAME="free-sg$RANDOM_STR" ;;
          "US(free)") CF_API="https://api.cf.us10-001.hana.ondemand.com"; APP_NAME="free-us$RANDOM_STR" ;;
          # AWS 区域
          "AWS-AU(Sydney)") CF_API="https://api.cf.ap10.hana.ondemand.com"; APP_NAME="aws-au$RANDOM_STR" ;;
          "AWS-BR(São Paulo)") CF_API="https://api.cf.br10.hana.ondemand.com"; APP_NAME="aws-br$RANDOM_STR" ;;
          "AWS-KR(Seoul)") CF_API="https://api.cf.ap12.hana.ondemand.com"; APP_NAME="aws-kr$RANDOM_STR" ;;
          "AWS-CA(Montreal)") CF_API="https://api.cf.ca10.hana.ondemand.com"; APP_NAME="aws-ca$RANDOM_STR" ;;
          "AWS-US(VA)") CF_API="https://api.cf.us10-001.hana.ondemand.com"; APP_NAME="aws-usva$RANDOM_STR" ;;
          "AWS-US(OR)") CF_API="https://api.cf.us11.hana.ondemand.com"; APP_NAME="aws-usor$RANDOM_STR" ;;
          "AWS-EU(Frankfurt)") CF_API="https://api.cf.eu10-005.hana.ondemand.com"; APP_NAME="aws-eu$RANDOM_STR" ;;
          "AWS-JP(Tokyo)") CF_API="https://api.cf.jp10.hana.ondemand.com"; APP_NAME="aws-jp$RANDOM_STR" ;;
          "AWS-SG(Singapore)") CF_API="https://api.cf.ap11.hana.ondemand.com"; APP_NAME="aws-sg$RANDOM_STR" ;;
          # GCP 区域
          "GCP-AU(Sydney)") CF_API="https://api.cf.ap30.hana.ondemand.com"; APP_NAME="gcp-au$RANDOM_STR" ;;
          "GCP-BR(São Paulo)") CF_API="https://api.cf.br30.hana.ondemand.com"; APP_NAME="gcp-br$RANDOM_STR" ;;
          "GCP-US(IA)") CF_API="https://api.cf.us30.hana.ondemand.com"; APP_NAME="gcp-us$RANDOM_STR" ;;
          "GCP-EU(Frankfurt)") CF_API="https://api.cf.eu30.hana.ondemand.com"; APP_NAME="gcp-eu$RANDOM_STR" ;;
          "GCP-JP(Osaka)") CF_API="https://api.cf.jp30.hana.ondemand.com"; APP_NAME="gcp-jpo$RANDOM_STR" ;;
          "GCP-JP(Tokyo)") CF_API="https://api.cf.jp31.hana.ondemand.com"; APP_NAME="gcp-jpt$RANDOM_STR" ;;
          "GCP-IL(Tel Aviv)") CF_API="https://api.cf.il30.hana.ondemand.com"; APP_NAME="gcp-il$RANDOM_STR" ;;
          "GCP-IN(Mumbai)") CF_API="https://api.cf.in30.hana.ondemand.com"; APP_NAME="gcp-in$RANDOM_STR" ;;
          "GCP-KSA(Dammam)") CF_API="https://api.cf.sa31.hana.ondemand.com"; APP_NAME="gcp-sa$RANDOM_STR" ;;
          # Azure 区域
          "Azure-AU(Sydney)") CF_API="https://api.cf.ap20.hana.ondemand.com"; APP_NAME="az-au$RANDOM_STR" ;;
          "Azure-BR(São Paulo)") CF_API="https://api.cf.br20.hana.ondemand.com"; APP_NAME="az-br$RANDOM_STR" ;;
          "Azure-CA(Montreal)") CF_API="https://api.cf.ca20.hana.ondemand.com"; APP_NAME="az-ca$RANDOM_STR" ;;
          "Azure-US(VA)") CF_API="https://api.cf.us21.hana.ondemand.com"; APP_NAME="az-va$RANDOM_STR" ;;
          "Azure-US(WA)") CF_API="https://api.cf.us20.hana.ondemand.com"; APP_NAME="az-wa$RANDOM_STR" ;;
          "Azure-EU(Netherlands)") CF_API="https://api.cf.eu20-001.hana.ondemand.com"; APP_NAME="az-eu$RANDOM_STR" ;;
          "Azure-JP(Tokyo)") CF_API="https://api.cf.jp20.hana.ondemand.com"; APP_NAME="az-jp$RANDOM_STR" ;;
          "Azure-SG(Singapore)") CF_API="https://api.cf.ap21.hana.ondemand.com"; APP_NAME="az-sg$RANDOM_STR" ;;
          # SAP Neo 区域
          "Neo-UAE(Dubai)") CF_API="https://api.cf.neo-ae1.hana.ondemand.com"; APP_NAME="neo-uae$RANDOM_STR" ;;
          "Neo-KSA(Riyadh)") CF_API="https://api.cf.neo-sa1.hana.ondemand.com"; APP_NAME="neo-ksa$RANDOM_STR" ;;
        esac

        echo "CF_API=$CF_API" >> $GITHUB_ENV
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

        if [ -n "${{ github.event.inputs.app_name }}" ]; then
          echo "APP_NAME=${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
        fi

        case "${{ github.event.inputs.type }}" in
          "ws直连") echo "DOCKER_IMAGE=ghcr.io/eooce/ws:latest" >> $GITHUB_ENV ;;
          "xhttp直连") echo "DOCKER_IMAGE=ghcr.io/eooce/goxhttp:latest" >> $GITHUB_ENV ;;
          "Firefox 浏览器") echo "DOCKER_IMAGE=jlesage/firefox:latest" >> $GITHUB_ENV ;;
          *) echo "DOCKER_IMAGE=ghcr.io/eooce/nodejs:main" >> $GITHUB_ENV ;;
        esac

    - name: Login to Cloud Foundry
      run: |
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"
        ORG=$(cf orgs | sed -n '4p')
        SPACE=$(cf spaces | sed -n '4p')
        echo "ORG=$ORG" >> $GITHUB_ENV
        echo "SPACE=$SPACE" >> $GITHUB_ENV
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "$ORG" -s "$SPACE"

    - name: Deploy application
      run: |
        DOCKER_IMAGE="${{ env.DOCKER_IMAGE }}"
        APP_NAME="${{ env.APP_NAME }}"
        MEMORY="${{ env.MEMORY }}"

        if [[ "$DOCKER_IMAGE" == "jlesage/firefox:latest" ]]; then
          echo "🚀 正在部署 Firefox 浏览器..."
          if cf push "$APP_NAME" \
            --docker-image "$DOCKER_IMAGE" \
            -m 1G -k 2G \
            -c "/init --novnc-port=$PORT" \
            --random-route \
            --health-check-type port \
            --timeout 900; then
            echo "✅ Firefox 部署成功"
          else
            cf delete "$APP_NAME" -f
            echo "❌ Firefox 部署失败，可能是资源不足或免费配额限制"
            exit 1
          fi
        else
          echo "🚀 正在部署节点类型应用..."
          if cf push "$APP_NAME" \
            --docker-image "$DOCKER_IMAGE" \
            -m "$MEMORY" -k 256M \
            --health-check-type port; then
            echo "✅ 部署成功"
          else
            cf delete "$APP_NAME" -f
            echo "❌ 部署失败，请检查配额或稍后重试"
            exit 1
          fi
        fi

    - name: Set environment variables
      run: |
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} ARGO_PORT "${{ secrets.ARGO_PORT }}"
        cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN }}"
        cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
        cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP || 'cf.877774.xyz' }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"

        if [[ "${{ env.DOCKER_IMAGE }}" == "jlesage/firefox:latest" ]]; then
          cf set-env ${{ env.APP_NAME }} KEEP_APP_RUNNING 1
          cf set-env ${{ env.APP_NAME }} ENABLE_CJK_FONT 1
          cf set-env ${{ env.APP_NAME }} LANG zh_CN.UTF-8
          cf set-env ${{ env.APP_NAME }} VNC_PASSWORD 930327
        fi

    - name: Restage application
      run: cf restage ${{ env.APP_NAME }}

    - name: Verify deployment
      run: cf app ${{ env.APP_NAME }}

    - name: 详细部署信息
      run: |
        echo "🚀 部署完成！"
        echo "区域: ${{ github.event.inputs.region }}"
        echo "组织: ${{ env.ORG }}"
        echo "空间: ${{ env.SPACE }}"
        echo "应用名称: ${{ env.APP_NAME }}"
        ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
        if [ -n "$ROUTE" ]; then
          echo "应用 URL: https://$ROUTE"
        else
          echo "⚠️ Firefox 使用 random-route 模式，请访问 CF 平台分配 URL 进行 VNC 连接。"
        fi
