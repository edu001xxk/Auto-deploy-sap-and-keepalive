name: 自动部署 SAP & Firefox

on:
  workflow_dispatch:
    inputs:
      type:
        description: '选择部署的节点类型'
        required: true
        default: 'Argo隧道CDN'
        type: choice
        options:
          - ws直连
          - xhttp直连
          - Argo隧道CDN
          - Firefox 浏览器
      region:
        description: '选择部署区域'
        required: true
        default: 'US(free)'
        type: choice
        options:
          - SG(free)
          - US(free)
          - AWS-US(VA)
          - AWS-EU(Frankfurt)
          - GCP-US(IA)
          - Azure-US(VA)
      app_name:
        description: '应用名称（可选，留空则自动生成）'
        required: false
        default: ''

env:
  MEMORY: 256M

jobs:
  deploy-app:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: Determine CF API endpoint and app name
      run: |
        RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
        case "${{ github.event.inputs.region }}" in
          "SG(free)")
            echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=free-sg$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "US(free)")
            echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=free-us$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "AWS-US(VA)")
            echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=aws-usva$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "AWS-EU(Frankfurt)")
            echo "CF_API=https://api.cf.eu10-005.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=aws-eu$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "GCP-US(IA)")
            echo "CF_API=https://api.cf.us30.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=gcp-us$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "Azure-US(VA)")
            echo "CF_API=https://api.cf.us21.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=az-va$RANDOM_STR" >> $GITHUB_ENV
            ;;
        esac

        if [ -n "${{ github.event.inputs.app_name }}" ]; then
          echo "APP_NAME=${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
        fi

        if [[ -n "${{ secrets.DOCKER_IMAGE }}" ]]; then
          echo "DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE }}" >> $GITHUB_ENV
        else
          case "${{ github.event.inputs.type }}" in
            "ws直连")
              echo "DOCKER_IMAGE=ghcr.io/eooce/ws:latest" >> $GITHUB_ENV
              ;;
            "xhttp直连")
              echo "DOCKER_IMAGE=ghcr.io/eooce/goxhttp:latest" >> $GITHUB_ENV
              ;;
            "Firefox 浏览器")
              echo "DOCKER_IMAGE=jlesage/firefox:latest" >> $GITHUB_ENV
              ;;
            *)
              echo "DOCKER_IMAGE=ghcr.io/eooce/nodejs:main" >> $GITHUB_ENV
              ;;
          esac
        fi

        echo "使用API端点: $CF_API"
        echo "应用名称: $APP_NAME"
        echo "部署类型: ${{ env.DOCKER_IMAGE }}"

    - name: Login to Cloud Foundry
      run: |
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"
        ORG=$(cf orgs | sed -n '4p')
        echo "ORG=$ORG" >> $GITHUB_ENV
        SPACE=$(cf spaces | sed -n '4p')
        echo "SPACE=$SPACE" >> $GITHUB_ENV
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "$ORG" -s "$SPACE"

    - name: Deploy application
      run: |
        if [[ "${{ env.DOCKER_IMAGE }}" == "jlesage/firefox:latest" ]]; then
          echo "🚀 正在部署 Firefox 浏览器..."
          if cf push ${{ env.APP_NAME }} \
            --docker-image ${{ env.DOCKER_IMAGE }} \
            -m 1G -k 2G \
            --no-route \
            --health-check-type port; then
            echo "Firefox 部署成功"
          else
            cf delete ${{ env.APP_NAME }} -f
            echo "❌ Firefox 部署失败，可能是资源不足或免费配额限制"
            exit 1
          fi
        else
          if cf push ${{ env.APP_NAME }} \
            --docker-image ${{ env.DOCKER_IMAGE }} \
            -m ${{ env.MEMORY }} -k 256M \
            --health-check-type port; then
            echo "Deployment successful"
          else
            cf delete ${{ env.APP_NAME }} -f
            echo "伙计,没资源了,部署失败,请明天早上8:20至9:00再尝试部署,已清理失败部署残留"
            exit 1
          fi
        fi

    - name: Set environment variables
      run: |
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} ARGO_PORT "${{ secrets.ARGO_PORT }}"
        cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN }}"
        cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
        cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP || 'cf.877774.xyz' }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"

        # Firefox 特殊设置
        if [[ "${{ env.DOCKER_IMAGE }}" == "jlesage/firefox:latest" ]]; then
          cf set-env ${{ env.APP_NAME }} VNC_LISTEN_PORT $PORT
          cf set-env ${{ env.APP_NAME }} KEEP_APP_RUNNING 1
          cf set-env ${{ env.APP_NAME }} ENABLE_CJK_FONT 1
          cf set-env ${{ env.APP_NAME }} LANG zh_CN.UTF-8
          cf set-env ${{ env.APP_NAME }} VNC_PASSWORD 930327
        fi

    - name: Restage application
      run: |
        cf restage ${{ env.APP_NAME }}

    - name: Verify deployment
      run: |
        cf app ${{ env.APP_NAME }}

    - name: 详细部署信息
      run: |
        echo "🚀 部署完成！"
        echo "区域: ${{ github.event.inputs.region }}"
        echo "组织: ${{ env.ORG }}"
        echo "空间: ${{ env.SPACE }}"
        echo "应用名称: ${{ env.APP_NAME }}"
        ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
        if [ -n "$ROUTE" ]; then
          echo "应用 URL: https://$ROUTE"
        else
          echo "⚠️ Firefox 使用 no-route 模式，请手动查看 VNC 隧道。"
        fi
